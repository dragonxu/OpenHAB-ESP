//#define ArduinoJsonDebug
#define OpenHABDebug
#include <pgmspace.h>

// WiFi parameters are inlcuded from secret.h which is not posted on GitHub
// Edit include/secret_example.h and rename to include/secret.h
#include "secret.h"

#include "OpenHAB.h"
#ifdef OPENHAB_GEN_CONFIG

// Global parameters for configuration generation
uint8_t itemCount = 0, groupCount = 0;      // required for GenConfig
static const PROGMEM char *SITEMAP = "demos";
static const PROGMEM char *OPENHAB_SERVER = "192.168.1.20";
static const PROGMEM int  LISTEN_PORT = 8080;
//#define LISTEN_PORT 8080                // The port to listen for incoming TCP connections

#else
// Global parameters for runtime
#define LISTEN_PORT 8080              // The port to listen for incoming TCP connections
// Copy itemCount, items, groupCount, groups generated by GenConfig.
// ------------------------------

uint8_t itemCount = 39;
OpenHab::ItemState itemStates[39];
OpenHab::Item items[] PROGMEM = {{"CurrentDate", ItemDateTime, 0, 255, "2020-01-09T11:26:58.207+0100", "Date [%A, %d.%m.%Y %H:%M]"}, {"DemoBlinds", ItemDimmer, 0, 255, "0", "Blinds [%d %%]"}, {"DemoLocation", ItemLocation, 0, 255, "52.5200066,13.4049540", nullptr}, {"DemoShutter", ItemRollerShutter, 0, 255, nullptr}, {"DemoSwitch", ItemSwitch, 1, 255, "ON", nullptr}, {"DimmedLight", ItemDimmer, 0, 255, "0", "Dimmer [%d %%]"}, {"FF_Bath", ItemGroup, 0, 0, "", nullptr}, {"FF_Bed", ItemGroup, 0, 1, "", nullptr}, {"Heating", ItemGroup, 0, 2, "ON", "No. of Active Heatings [(%d)]"}, {"Heating_FF_Bath", ItemSwitch, 1, 255, "ON", nullptr}, {"Heating_FF_Bed", ItemSwitch, 1, 255, "ON", nullptr}, {"Light_FF_Bath_Ceiling", ItemSwitch, 0, 255, "ON", nullptr}, {"Light_FF_Bath_Mirror", ItemSwitch, 0, 255, "ON", nullptr}, {"Light_FF_Bed_Ceiling", ItemSwitch, 
0, 255, "OFF", nullptr}, {"Lights", ItemGroup, 0, 3, "ON", "All Lights [(%d)]"}, {"Moon_Azimuth", ItemNumber_Angle, 0, 255, "7.247433253472477 °", "Moon Azimuth [%.2f °]"}, {"Moon_Elevation", ItemNumber_Angle, 0, 255, "-15.293123109349958 °", "Moon Elevation [%.2f °]"}, {"Moon_Phase", ItemString, 0, 255, "Waxing gibbous", "Moon Phase [%s]"}, {"RGBLight", ItemColor, 0, 255, nullptr}, {"Scene_General", ItemNumber, 1, 255, "0", nullptr}, {"Shutter_FF_Bath", ItemRollerShutter, 0, 255, "100", nullptr}, {"Shutter_FF_Bed", ItemRollerShutter, 0, 255, "100", nullptr}, {"Sun_Azimuth", ItemNumber_Angle, 0, 255, "168.82166393125803 °", "Sun Azimuth [%.2f °]"}, {"Sun_Elevation", ItemNumber_Angle, 0, 255, "14.58443529204255 °", "Sun Elevation [%.2f °]"}, {"Sunrise_Time", ItemDateTime, 0, 255, "2020-01-09T08:16:00.000+0100", "Sunrise [%H:%M]"}, {"Sunset_Time", ItemDateTime, 0, 255, "2020-01-09T16:08:00.000+0100", "Sunset [%H:%M]"}, {"Temperature", ItemGroup, 0, 4, "21.5", "Avg. Room Temperature [%.1f °C]"}, {"Temperature_FF_Bath", ItemNumber, 0, 255, "21.8", "Bath [%.1f °C]"}, {"Temperature_FF_Bed", ItemNumber, 0, 255, "21.1", "Bedroom [%.1f °C]"}, {"Temperature_Setpoint", ItemDimmer, 0, 255, 
"22", "Temperature [%.1f °C]"}, {"Weather_Chart", ItemGroup, 0, 5, "", nullptr}, {"Weather_Chart_Period", ItemNumber, 0, 255, "0", nullptr}, {"Weather_Temp_Max", ItemNumber, 0, 255, "0", "Todays Maximum [%.1f °C]"}, {"Weather_Temp_Min", ItemNumber, 0, 255, "0", "Todays Minimum [%.1f °C]"}, {"Weather_Temperature", ItemNumber, 0, 255, "0", "Outside Temperature [%.1f °C]"}, {"Window_FF_Bath", ItemContact, 1, 255, "CLOSED", "Bath [%s]"}, {"Window_FF_Bed", ItemContact, 1, 255, "CLOSED", "Bedroom [%s]"}, {"Windows", ItemGroup, 0, 6, "CLOSED", "Open windows [(%d)]"}, {"gFF", ItemGroup, 0, 7, "", nullptr}};
uint8_t groupCount = 8;
OpenHab::Group groups[] = {{ItemNull, (GroupFunction) 0, new uint8_t[6]{27, 35, 20, 9, 12, 11}, 6}, {ItemNull, (GroupFunction) 0, new uint8_t[5]{28, 36, 21, 10, 13}, 5}, {ItemSwitch, (GroupFunction) 2, new uint8_t[2]{10, 9}, 2}, {ItemSwitch, (GroupFunction) 2, new uint8_t[3]{13, 12, 11}, 3}, {ItemNumber, (GroupFunction) 1, new uint8_t[2]{28, 27}, 2}, {ItemNull, (GroupFunction) 0, new uint8_t[3]{33, 32, 34}, 3}, {ItemContact, (GroupFunction) 2, new uint8_t[2]{36, 35}, 2}, {ItemNull, (GroupFunction) 0, new uint8_t[2]{7, 6}, 2}};

// ------------------------------

void handleStateChange(uint8_t itemIdx) {
  OpenHab::Item item = getItem(itemIdx);	
  Serial.printf_P(PSTR("handleStateChange: Item %s changed state to \"%s\"\n"), item.name, itemStates[itemIdx].state);
}

#endif

OpenHab OpenHabServer(LISTEN_PORT);   // Create an instance of the OpenHAB server

// For every item that is changed by the end user (UI), this function will be called

void setup(void) {
  Serial.begin(115200);
  while (!Serial) {} // Wait for serial port initialization
  Serial.println();  //Clear some garbage that may be printed to the serial console
  //ets_intr_lock(); // all interupt off
  //wdt_disable();
  //ESP.wdtEnable(65535);
  delay(500);
  Serial.printf_P(PSTR("free heap memory: %d\n"), ESP.getFreeHeap());
  
  if (!OpenHabServer.Init(ssid, softAPssid, passphrase, allowedMAC))
    DbgPrintln(F("Server init failed"));
  else { 
#ifdef OPENHAB_GEN_CONFIG
    OpenHabServer.GenConfig(OPENHAB_SERVER, LISTEN_PORT, SITEMAP);
    DbgPrintln(F("OpenHab config generation completed"));
#else
    OpenHabServer.StartServer();	// Start the server
    OpenHabServer.stateChangeCallback(handleStateChange); // Register callback for state changes
    DbgPrintln(F("HTTP server started"));
#endif
  }
}

void loop() {  // Handle REST calls and state changed callbacks
  OpenHabServer.HandleClient();
}
